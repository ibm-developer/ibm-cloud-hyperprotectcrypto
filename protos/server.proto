// Code generated by protogen. DO NOT EDIT.

/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package grep11;


import "gogo.proto";

option java_multiple_files = true;
option java_package = "com.ibm.crypto.grep11.grpc";

service Crypto {
// See https://www-03.ibm.com/security/cryptocards/pciecc/pdf/ep11-structure.pdf for
// further documentation

	// CK_RV m_GenerateRandom (
	//     CK_BYTE_PTR rnd, CK_ULONG rndlen,
	//     target_t target) ;
	rpc GenerateRandom(GenerateRandomRequest) returns (GenerateRandomResponse) {}

	// CK_RV m_DigestInit (
	//     unsigned char *state, size_t *statelen,
	//     const CK_MECHANISM_PTR mech,
	//     target_t target) ;
	rpc DigestInit(DigestInitRequest) returns (DigestInitResponse) {}

	// CK_RV m_Digest (
	//     const unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR data, CK_ULONG datalen,
	//     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
	//     target_t target) ;
	rpc Digest(DigestRequest) returns (DigestResponse) {}

	// CK_RV m_DigestUpdate (
	//     unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR data, CK_ULONG datalen,
	//     target_t target) ;
	rpc DigestUpdate(DigestUpdateRequest) returns (DigestUpdateResponse) {}

	// CK_RV m_DigestKey (
	//     unsigned char *state, size_t statelen,
	//     const unsigned char *key, size_t keylen,
	//     target_t target) ;
	rpc DigestKey(DigestKeyRequest) returns (DigestKeyResponse) {}

	// CK_RV m_DigestFinal (
	//     const unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
	//     target_t target) ;
	rpc DigestFinal(DigestFinalRequest) returns (DigestFinalResponse) {}

	// CK_RV m_DigestSingle (
	//     CK_MECHANISM_PTR mech,
	//     CK_BYTE_PTR data, CK_ULONG datalen,
	//     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
	//     target_t target) ;
	rpc DigestSingle(DigestSingleRequest) returns (DigestSingleResponse) {}

	// CK_RV m_EncryptInit (
	//     unsigned char *state, size_t *statelen,
	//     CK_MECHANISM_PTR mech,
	//     const unsigned char *key, size_t keylen,
	//     target_t target) ;
	rpc EncryptInit(EncryptInitRequest) returns (EncryptInitResponse) {}

	// CK_RV m_DecryptInit (
	//     unsigned char *state, size_t *statelen,
	//     CK_MECHANISM_PTR mech,
	//     const unsigned char *key, size_t keylen,
	//     target_t target) ;
	rpc DecryptInit(DecryptInitRequest) returns (DecryptInitResponse) {}

	// CK_RV m_EncryptUpdate (
	//     unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR plain, CK_ULONG plainlen,
	//     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
	//     target_t target) ;
	rpc EncryptUpdate(EncryptUpdateRequest) returns (EncryptUpdateResponse) {}

	// CK_RV m_DecryptUpdate (
	//     unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
	//     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
	//     target_t target) ;
	rpc DecryptUpdate(DecryptUpdateRequest) returns (DecryptUpdateResponse) {}

	// CK_RV m_Encrypt (
	//     const unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR plain, CK_ULONG plainlen,
	//     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
	//     target_t target) ;
	rpc Encrypt(EncryptRequest) returns (EncryptResponse) {}

	// CK_RV m_Decrypt (
	//     const unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
	//     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
	//     target_t target) ;
	rpc Decrypt(DecryptRequest) returns (DecryptResponse) {}

	// CK_RV m_EncryptFinal (
	//     const unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
	//     target_t target) ;
	rpc EncryptFinal(EncryptFinalRequest) returns (EncryptFinalResponse) {}

	// CK_RV m_DecryptFinal (
	//     const unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
	//     target_t target) ;
	rpc DecryptFinal(DecryptFinalRequest) returns (DecryptFinalResponse) {}

	// CK_RV m_EncryptSingle (
	//     const unsigned char *key, size_t keylen,
	//     CK_MECHANISM_PTR mech,
	//     CK_BYTE_PTR plain, CK_ULONG plainlen,
	//     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
	//     target_t target) ;
	rpc EncryptSingle(EncryptSingleRequest) returns (EncryptSingleResponse) {}

	// CK_RV m_DecryptSingle (
	//     const unsigned char *key, size_t keylen,
	//     CK_MECHANISM_PTR mech,
	//     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
	//     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
	//     target_t target) ;
	rpc DecryptSingle(DecryptSingleRequest) returns (DecryptSingleResponse) {}

	// CK_RV m_SignInit (
	//     unsigned char *state, size_t *statelen,
	//     CK_MECHANISM_PTR mech,
	//     const unsigned char *privKey, size_t privKeylen,
	//     target_t target) ;
	rpc SignInit(SignInitRequest) returns (SignInitResponse) {}

	// CK_RV m_VerifyInit (
	//     unsigned char *state, size_t *statelen,
	//     CK_MECHANISM_PTR mech,
	//     const unsigned char *pubKey, size_t pubKeylen,
	//     target_t target) ;
	rpc VerifyInit(VerifyInitRequest) returns (VerifyInitResponse) {}

	// CK_RV m_SignUpdate (
	//     unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR data, CK_ULONG datalen,
	//     target_t target) ;
	rpc SignUpdate(SignUpdateRequest) returns (SignUpdateResponse) {}

	// CK_RV m_VerifyUpdate (
	//     unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR data, CK_ULONG datalen,
	//     target_t target) ;
	rpc VerifyUpdate(VerifyUpdateRequest) returns (VerifyUpdateResponse) {}

	// CK_RV m_SignFinal (
	//     const unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
	//     target_t target) ;
	rpc SignFinal(SignFinalRequest) returns (SignFinalResponse) {}

	// CK_RV m_VerifyFinal (
	//     const unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR signature, CK_ULONG signaturelen,
	//     target_t target) ;
	rpc VerifyFinal(VerifyFinalRequest) returns (VerifyFinalResponse) {}

	// CK_RV m_Sign (
	//     const unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR data, CK_ULONG datalen,
	//     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
	//     target_t target) ;
	rpc Sign(SignRequest) returns (SignResponse) {}

	// CK_RV m_Verify (
	//     const unsigned char *state, size_t statelen,
	//     CK_BYTE_PTR data, CK_ULONG datalen,
	//     CK_BYTE_PTR signature, CK_ULONG signaturelen,
	//     target_t target) ;
	rpc Verify(VerifyRequest) returns (VerifyResponse) {}

	// CK_RV m_SignSingle (
	//     const unsigned char *privKey, size_t privKeylen,
	//     CK_MECHANISM_PTR mech,
	//     CK_BYTE_PTR data, CK_ULONG datalen,
	//     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
	//     target_t target) ;
	rpc SignSingle(SignSingleRequest) returns (SignSingleResponse) {}

	// CK_RV m_VerifySingle (
	//     const unsigned char *pubKey, size_t pubKeylen,
	//     CK_MECHANISM_PTR mech,
	//     CK_BYTE_PTR data, CK_ULONG datalen,
	//     CK_BYTE_PTR signature, CK_ULONG signaturelen,
	//     target_t target) ;
	rpc VerifySingle(VerifySingleRequest) returns (VerifySingleResponse) {}

	// CK_RV m_GenerateKey (
	//     CK_MECHANISM_PTR mech,
	//     CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
	//     const unsigned char *pin, size_t pinlen,
	//     unsigned char *key, size_t *keylen,
	//     unsigned char *checkSum, size_t *checkSumlen,
	//     target_t target) ;
	rpc GenerateKey(GenerateKeyRequest) returns (GenerateKeyResponse) {}

	// CK_RV m_GenerateKeyPair (
	//     CK_MECHANISM_PTR mech,
	//     CK_ATTRIBUTE_PTR pubKeyTemplate, CK_ULONG pubKeyTemplatelen,
	//     CK_ATTRIBUTE_PTR privKeyTemplate, CK_ULONG privKeyTemplatelen,
	//     const unsigned char *pin, size_t pinlen,
	//     unsigned char *privKey, size_t *privKeylen,
	//     unsigned char *pubKey, size_t *pubKeylen,
	//     target_t target) ;
	rpc GenerateKeyPair(GenerateKeyPairRequest) returns (GenerateKeyPairResponse) {}

	// CK_RV m_WrapKey (
	//     const unsigned char *key, size_t keylen,
	//     const unsigned char *keK, size_t keKlen,
	//     const unsigned char *macKey, size_t macKeylen,
	//     const CK_MECHANISM_PTR mech,
	//     CK_BYTE_PTR wrapped, CK_ULONG_PTR wrappedlen,
	//     target_t target) ;
	rpc WrapKey(WrapKeyRequest) returns (WrapKeyResponse) {}

	// CK_RV m_UnwrapKey (
	//     const CK_BYTE_PTR wrapped, CK_ULONG wrappedlen,
	//     const unsigned char *keK, size_t keKlen,
	//     const unsigned char *macKey, size_t macKeylen,
	//     const unsigned char *pin, size_t pinlen,
	//     const CK_MECHANISM_PTR mech,
	//     const CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
	//     unsigned char *unwrapped, size_t *unwrappedlen,
	//     CK_BYTE_PTR checkSum, CK_ULONG *checkSumlen,
	//     target_t target) ;
	rpc UnwrapKey(UnwrapKeyRequest) returns (UnwrapKeyResponse) {}

	// CK_RV m_DeriveKey (
	//     CK_MECHANISM_PTR mech,
	//     CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
	//     const unsigned char *baseKey, size_t baseKeylen,
	//     const unsigned char *data, size_t datalen,
	//     const unsigned char *pin, size_t pinlen,
	//     unsigned char *newKey, size_t *newKeylen,
	//     unsigned char *checkSum, size_t *checkSumlen,
	//     target_t target) ;
	rpc DeriveKey(DeriveKeyRequest) returns (DeriveKeyResponse) {}

	// CK_RV m_GetMechanismList (
	//     CK_SLOT_ID slot,
	//     CK_MECHANISM_TYPE_PTR mechs, CK_ULONG_PTR mechslen,
	//     target_t target) ;
	rpc GetMechanismList(GetMechanismListRequest) returns (GetMechanismListResponse) {}

	// CK_RV m_GetMechanismInfo (
	//     CK_SLOT_ID slot,
	//     CK_MECHANISM_TYPE mech,
	//     CK_MECHANISM_INFO_PTR mechInfo,
	//     target_t target) ;
	rpc GetMechanismInfo(GetMechanismInfoRequest) returns (GetMechanismInfoResponse) {}

	// CK_RV m_GetAttributeValue (
	//     const unsigned char *object, size_t objectlen,
	//     CK_ATTRIBUTE_PTR attributes, CK_ULONG attributeslen,
	//     target_t target) ;
	rpc GetAttributeValue(GetAttributeValueRequest) returns (GetAttributeValueResponse) {}

	// CK_RV m_SetAttributeValue (
	//     unsigned char *object, size_t objectlen,
	//     CK_ATTRIBUTE_PTR attributes, CK_ULONG attributeslen,
	//     target_t target) ;
	rpc SetAttributeValue(SetAttributeValueRequest) returns (SetAttributeValueResponse) {}

}

message GenerateRandomRequest {
	uint64 Len = 1;
}

message GenerateRandomResponse {
	bytes Rnd = 1;
}

message DigestInitRequest {
	Mechanism Mech = 2;
}

message DigestInitResponse {
	bytes State = 1;
}

message DigestRequest {
	bytes State = 1;
	bytes Data = 2;
}

message DigestResponse {
	bytes Digest = 3;
}

message DigestUpdateRequest {
	bytes State = 1;
	bytes Data = 2;
}

message DigestUpdateResponse {
	bytes State = 1;
}

message DigestKeyRequest {
	bytes State = 1;
	bytes Key = 2;
}

message DigestKeyResponse {
	bytes State = 1;
}

message DigestFinalRequest {
	bytes State = 1;
}

message DigestFinalResponse {
	bytes Digest = 2;
}

message DigestSingleRequest {
	Mechanism Mech = 1;
	bytes Data = 2;
}

message DigestSingleResponse {
	bytes Digest = 3;
}

message EncryptInitRequest {
	Mechanism Mech = 2;
	bytes Key = 3;
}

message EncryptInitResponse {
	bytes State = 1;
}

message DecryptInitRequest {
	Mechanism Mech = 2;
	bytes Key = 3;
}

message DecryptInitResponse {
	bytes State = 1;
}

message EncryptUpdateRequest {
	bytes State = 1;
	bytes Plain = 2;
}

message EncryptUpdateResponse {
	bytes State = 1;
	bytes Ciphered = 3;
}

message DecryptUpdateRequest {
	bytes State = 1;
	bytes Ciphered = 2;
}

message DecryptUpdateResponse {
	bytes State = 1;
	bytes Plain = 3;
}

message EncryptRequest {
	bytes State = 1;
	bytes Plain = 2;
}

message EncryptResponse {
	bytes Ciphered = 3;
}

message DecryptRequest {
	bytes State = 1;
	bytes Ciphered = 2;
}

message DecryptResponse {
	bytes Plain = 3;
}

message EncryptFinalRequest {
	bytes State = 1;
}

message EncryptFinalResponse {
	bytes Ciphered = 2;
}

message DecryptFinalRequest {
	bytes State = 1;
}

message DecryptFinalResponse {
	bytes Plain = 2;
}

message EncryptSingleRequest {
	bytes Key = 1;
	Mechanism Mech = 2;
	bytes Plain = 3;
}

message EncryptSingleResponse {
	bytes Ciphered = 4;
}

message DecryptSingleRequest {
	bytes Key = 1;
	Mechanism Mech = 2;
	bytes Ciphered = 3;
}

message DecryptSingleResponse {
	bytes Plain = 4;
}

message SignInitRequest {
	Mechanism Mech = 2;
	bytes PrivKey = 3;
}

message SignInitResponse {
	bytes State = 1;
}

message VerifyInitRequest {
	Mechanism Mech = 2;
	bytes PubKey = 3;
}

message VerifyInitResponse {
	bytes State = 1;
}

message SignUpdateRequest {
	bytes State = 1;
	bytes Data = 2;
}

message SignUpdateResponse {
	bytes State = 1;
}

message VerifyUpdateRequest {
	bytes State = 1;
	bytes Data = 2;
}

message VerifyUpdateResponse {
	bytes State = 1;
}

message SignFinalRequest {
	bytes State = 1;
}

message SignFinalResponse {
	bytes Signature = 2;
}

message VerifyFinalRequest {
	bytes State = 1;
	bytes Signature = 2;
}

message VerifyFinalResponse {
}

message SignRequest {
	bytes State = 1;
	bytes Data = 2;
}

message SignResponse {
	bytes Signature = 3;
}

message VerifyRequest {
	bytes State = 1;
	bytes Data = 2;
	bytes Signature = 3;
}

message VerifyResponse {
}

message SignSingleRequest {
	bytes PrivKey = 1;
	Mechanism Mech = 2;
	bytes Data = 3;
}

message SignSingleResponse {
	bytes Signature = 4;
}

message VerifySingleRequest {
	bytes PubKey = 1;
	Mechanism Mech = 2;
	bytes Data = 3;
	bytes Signature = 4;
}

message VerifySingleResponse {
}

message GenerateKeyRequest {
	Mechanism Mech = 1;
	map<uint64,bytes> Template = 2 [(gogoproto.castkey) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Attribute"];
	string KeyId = 4;
}

message GenerateKeyResponse {
	bytes Key = 4;
	bytes CheckSum = 5;
}

message GenerateKeyPairRequest {
	Mechanism Mech = 1;
	map<uint64,bytes> PubKeyTemplate = 2 [(gogoproto.castkey) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Attribute"];
	map<uint64,bytes> PrivKeyTemplate = 3 [(gogoproto.castkey) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Attribute"];
	string PrivKeyId = 5;
	string PubKeyId = 6;
}

message GenerateKeyPairResponse {
	bytes PrivKey = 5;
	bytes PubKey = 6;
}

message WrapKeyRequest {
	bytes Key = 1;
	bytes KeK = 2;
	bytes MacKey = 3;
	Mechanism Mech = 4;
}

message WrapKeyResponse {
	bytes Wrapped = 5;
}

message UnwrapKeyRequest {
	bytes Wrapped = 1;
	bytes KeK = 2;
	bytes MacKey = 3;
	Mechanism Mech = 5;
	map<uint64,bytes> Template = 6 [(gogoproto.castkey) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Attribute"];
	string UnwrappedId = 7;
}

message UnwrapKeyResponse {
	bytes Unwrapped = 7;
	bytes CheckSum = 8;
}

message DeriveKeyRequest {
	Mechanism Mech = 1;
	map<uint64,bytes> Template = 2 [(gogoproto.castkey) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Attribute"];
	bytes BaseKey = 3;
	bytes Data = 4;
	string NewKeyId = 6;
}

message DeriveKeyResponse {
	bytes NewKey = 6;
	bytes CheckSum = 7;
}

message GetMechanismListRequest {
}

message GetMechanismListResponse {
	repeated uint64 Mechs = 2 [(gogoproto.casttype) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Mechanism"];
}

message GetMechanismInfoRequest {
	uint64 Mech = 2 [(gogoproto.casttype) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Mechanism"];
}

message GetMechanismInfoResponse {
	MechanismInfo MechInfo = 3;
}

message GetAttributeValueRequest {
	bytes Object = 1;
	map<uint64,bytes> Attributes = 2 [(gogoproto.castkey) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Attribute"];
}

message GetAttributeValueResponse {
	map<uint64,bytes> Attributes = 2 [(gogoproto.castkey) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Attribute"];
}

message SetAttributeValueRequest {
	bytes Object = 1;
	map<uint64,bytes> Attributes = 2 [(gogoproto.castkey) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Attribute"];
}

message SetAttributeValueResponse {
	bytes Object = 1;
}

message Mechanism {
	uint64 Mechanism = 1 [(gogoproto.casttype) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Mechanism"];
	bytes Parameter = 2; //optional
}

message MechanismInfo {
	uint64 MinKeySize = 1;
	uint64 MaxKeySize = 2;
	uint64 Flags = 3;
}

message Grep11Error {
	uint64 Code = 1 [(gogoproto.casttype) = "github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/golang/ep11.Return"];
	string Detail = 2;
	bool Retry = 3;
}
