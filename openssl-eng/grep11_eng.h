/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/ibm-developer/ibm-cloud-hyperprotectcrypto/openssl-eng */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "openssleng_ep11.go"









#include "nativeC/grep11.h"

//According https://github.com/golang/go/wiki/cgo, we can't define any C functions in preamble if you're using exports.
//So all openssl engine implementation is put in a separate C file.

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


/*RemoteGenerateECDSAKeyPair generate ECDSA key pairs.
For now only secp224r1 (P-224 under NIST name), secp256r1 (P-256), secp384r1 (P-384) and secp521r1 (P-521) are supported, which are also supported by golang elliptic package.
However, ep11 also support brainpool curve and brainpool twisted curves (page 10, reference):
EC objects are only supported based on specific curves (prime field, NIST [Nat13, D.1.2] or Brainpool [LM10, 3]),
therefore curve parameters are fixed, and may not be replaced by host-based attackers.
*/

extern int RemoteGenerateECDSAKeyPair(unsigned char* p0, size_t p1, unsigned char* p2, size_t* p3, unsigned char* p4, size_t* p5);

//RemoteSignSingle return signature

extern GoInt32 RemoteSignSingle(unsigned char* p0, size_t p1, unsigned char* p2, size_t p3, unsigned char* p4, size_t* p5);

#ifdef __cplusplus
}
#endif
