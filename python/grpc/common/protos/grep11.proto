/*
Copyright IBM Corp. 2018 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package grep11;

import "manager.proto";
import "discovery.proto";
import "keystore.proto";
import "user.proto";
import "annotations.proto";
import "google/api/annotations.proto";

service KeyStore {
	// Get keystore info (PKCS11 token label)
	rpc GetStoreInfo(GetStoreInfoRequest) returns (GetStoreResponse) {}

	rpc GetObjects(GetObjectsRequest) returns (GetObjectsResponse) {}
	rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {}
	rpc StoreObject(StoreObjectRequest) returns (StoreObjectResponse) {}
}

service UserManagement {
	rpc ChangeUser(ChangeUserRequest) returns (ChangeUserResponse) {}

	rpc GetToken(GetTokenRequest) returns (GetTokenResponse) {
		option (google.api.http) = {
	      get: "/v1/keystore/gettoken"
	    };
	}
	rpc ReturnToken(ReturnTokenRequest) returns (ReturnTokenResponse) {}
}

// TODO: Should this be replaced?
// By service LoadBalancer from "google.golang.org/grpc/grpclb/grpc_lb_v1/service"
service Discovery {
	rpc GetServerList(GetServerListRequest) returns (GetServerListResponse) {}
}

/*** DEPRECATED ***/
/******* Deprecated ***********/
// Original GREP11, just for ECC p256
message GenerateInfo {
	bytes oid = 1;
}

message GenerateStatus {
	bytes privKey = 1;
	bytes pubKey = 2;
	string error = 3;
}

message SignInfo {
	bytes privKey = 1;
	bytes data = 2;
}

message SignStatus {
	bytes sig = 1;
	string error = 2;
}

message VerifyInfo {
	bytes pubKey = 1;
	bytes data = 2;
	bytes sig = 3;
}

message VerifyStatus {
	bool valid = 1;
	string error = 2;
}

service Grep11Manager {
	rpc Load(LoadInfo) returns (LoadStatus) {}
}

service Grep11 {
	rpc GenerateECKey(GenerateInfo) returns (GenerateStatus) {}
	rpc SignP11ECDSA(SignInfo) returns (SignStatus) {}
	rpc VerifyP11ECDSA(VerifyInfo) returns (VerifyStatus) {}
}
